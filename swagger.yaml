swagger: '2.0'
info:
  title: SDAIA Server API
  description: API for interface applications with SDAIA Server.
  version: 0.0.0
host: 'localhost:8080'
schemes:
  - http
  - https
basePath: /sdaia-api/v0/
produces:
  - application/json
paths:
  /:
    get:
      summary: Ping
      description: |
        This path does nothing but sending a welcome message.
        You can use this path to check if API is working.
      responses:
        '200':
          description: A JSON object
          schema:
            $ref: '#/definitions/APIMessage'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users:
    get:
      summary: Get all users
      description: |
        Gets all public data from all users.
      tags:
        - Users
      responses:
        '200':
          description: An Array of Users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '403':
          description: Access denied
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: No users available
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Add user
      description: |
        Adds new user.
      tags:
        - Users
      responses:
        '200':
          description: A JSON object
          schema:
            $ref: '#/definitions/APIMessage'
        '403':
          description: Adding denied
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/{userId}:
    get:
      summary: Get user data from userId
      description: |
        Gets all public data from one specific user, based on his id.
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          type: string
      responses:
        '200':
          description: An User object
          schema:
            $ref: '#/definitions/User'
        '403':
          description: Access denied
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: User does not exist
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Edit user data from userId
      description: |
        Edits public data from one specific user, based on his id.
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          type: string
      responses:
        '200':
          description: A JSON object
          schema:
            $ref: '#/definitions/APIMessage'
        '403':
          description: Edit denied
          schema:
            $ref: '#/definitions/Error'
				'404':
					description: User does not exist
					schema:
						$ref: '#/definitions/Error'
				default:
					description: Unexpected error
					schema:
						$ref: '#/definitions/Error'
    delete:
    	summary: Delete user from userId
			description: |
				Deletes reference and data from one specific user, based on his id.
			tags:
				- Users
			parameters:
				- name: userId
					in: path
					description: User id
					required: true
					type: string
			responses:
				'200':
					description: A JSON object
					schema:
						$ref: '#/definitions/APIMessage'
				'403':
          description: Edit denied
          schema:
            $ref: '#/definitions/Error'
				'404':
					description: User does not exist
					schema:
						$ref: '#/definitions/Error'
				default:
					description: Unexpected error
					schema:
						$ref: '#/definitions/Error'
	/users/{userName}:

definitions:
  Product:
    type: object
    properties:
      product_id:
        type: string
        description: 'Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.'
      description:
        type: string
        description: Description of product.
      display_name:
        type: string
        description: Display name of product.
      capacity:
        type: string
        description: 'Capacity of product. For example, 4 people.'
      image:
        type: string
        description: Image URL representing the product.
  PriceEstimate:
    type: object
    properties:
      product_id:
        type: string
        description: 'Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles'
      currency_code:
        type: string
        description: '[ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code.'
      display_name:
        type: string
        description: Display name of product.
      estimate:
        type: string
        description: 'Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or "Metered" for TAXI.'
      low_estimate:
        type: number
        description: Lower bound of the estimated price.
      high_estimate:
        type: number
        description: Upper bound of the estimated price.
      surge_multiplier:
        type: number
        description: Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier.
  Profile:
    type: object
    properties:
      first_name:
        type: string
        description: First name of the Uber user.
      last_name:
        type: string
        description: Last name of the Uber user.
      email:
        type: string
        description: Email address of the Uber user
      picture:
        type: string
        description: Image URL of the Uber user.
      promo_code:
        type: string
        description: Promo code of the Uber user.
  Activity:
    type: object
    properties:
      uuid:
        type: string
        description: Unique identifier for the activity
  Activities:
    type: object
    properties:
      offset:
        type: integer
        format: int32
        description: Position in pagination.
      limit:
        type: integer
        format: int32
        description: Number of items to retrieve (100 max).
      count:
        type: integer
        format: int32
        description: Total number of items available.
      history:
        type: array
        items:
          $ref: '#/definitions/Activity'
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
